!0010  # entry point is 0x0010
@0010
28800f	# 0010:  prologue:  addi	  r1  r0  0x0f    # set up stack pointer register
3b900c	# 0013:  	   shftl  r7  r1  $12
54800d	# 0016:  	   call   r1  main
00	# 0019:  	   stop
	# 001a:  	.align
108e	# 001a:  main:   sw      r1  r0  r7      # push return address
2bfffe	# 001c:  	addi    r7  r7 $-2      # update stack pointer
2bfffc	# 001f:  	addi    r7  r7 $-4      # allocate space for return val and 1 arg
290004	# 0022:  	addi    r2  r0 $4       # index from sp to 1st arg
298004	# 0025:  	addi    r3  r0 $4       # first arg value
11f4	# 0028:  	sw      r3  r7 r2       # store in stack frame
54801f	# 002a:  	call    r1  fact
290004	# 002d:  	addi    r2  r0 $4       # index from sp to return value
09f4	# 0030:  	lw      r3  r7 r2       # fetch return value into r3
2bf006	# 0032:  	addi    r7  r7 $6       # restore stack pointer
5a80	# 0035:  	printr  r5              # print the fact
28f002	# 0037:  	addi    r1  r7 $2       # restore stack pointer
0882	# 003a:  	lw      r1  r0 r1       # fetch return address
5002	# 003c:  	jr      r0  r0 r1       # return
	# 003e:          .align
2bfffc	# 003e:  fact:   addi r7 r7 $-4 # allocate stack space
290004	# 0041:          addi r2 r0 $4  # index from sp to return address field
10f4	# 0044:          sw   r1 r7 r2  # save return address
290008	# 0046:          addi r2 r0 $8  # index from sp to n
2a8004	# 0049:          addi   r5 r0 $4  # r5 = n
2b5fff	# 004c:          addi r6 r5 $-1  # r6  = n - 1
22dc	# 004f:  top:    mul  r5 r5 r6  # fact = n * (n-1) saved in r5  
2b6fff	# 0051:  	addi r6 r6 $-1
40e0	# 0054:  	cmp  r1 r6 r0  # compare 1 and n
4404	# 0056:          be   :done     # r5 = 24
4ff7	# 0058:  	bgt :top
288008	# 005a:  done:  addi r1 r0 $8
12b2	# 005d:         sw r5 r3  r1
290004	# 005f:         addi r2 r0 $4
08f4	# 0062:         lw r1 r7 r2
2bf004	# 0064:         addi r7 r7 $4
5002	# 0067:         jr r0 r0 r1
